"""Exceptions file for Spylib."""
from __future__ import absolute_import


class AuthCredentialException(Exception):
    """AuthCredentialException yet to be implemented."""

    pass


class MethodException(Exception):
    """MethodException yet to be implemented."""

    pass


class APIException(Exception):
    """API Exception generated by Spylib."""

    default_message = "An API call has failed."
    default_errors = None

    def __init__(self, message=None, errors=None, response=None):
        """
        Init for APIException.

        Args:
            message (str): Human readable message passed through the exception
            errors (str):  An error corresponding to the exception
            response (object): A response corresponding to the exception

        """
        setattr(self, "message", message or self.default_message)
        setattr(self, "errors", errors or self.default_errors)
        setattr(self, "response", response)

    def __str__(self):
        """Return message wrapped as a string."""
        return str(self.message)


class BadRequest(APIException):
    """BadRequest Exception returning a 400."""

    default_message = "Your request is malformed - 400."
    default_errors = None


class NotAuthenticated(APIException):
    """Authentication Exception returning a 401."""

    default_message = "You are not authenticated - 401."
    default_errors = None


class PermissionDenied(APIException):
    """Permission Denied Exception returning a 403."""

    default_message = "You are not authorized to access this resource - 403."
    default_errors = None


class NotFound(APIException):
    """Resource not found Exception returning a 403."""

    default_message = "The resource you requested could not be found - 404."
    default_errors = None


class MethodNotAllowed(APIException):
    """Bad method used."""

    default_message = "Method {method} not allowed - 404."
    default_errors = None

    def __init__(self, method, message=None, errors=None, response=None):
        """
        Init function.

        Args:
            method (str): A method used on the api request
            message (str): Message passed back
            errors (str): Errors passed back
            response (object): response object passed back

        """
        if message is None:
            message = self.default_message.format(method=method)

        super(MethodNotAllowed, self).__init__(
            message=message, errors=errors, response=response
        )


class Timeout(APIException):
    """A timeout exception resulting from an API timeout."""

    default_message = "An upstream server timedout."
    default_errors = None


class ServiceUnavailable(APIException):
    """Service unavailable exception resulting from a failed service call."""

    default_message = "The service you are trying to reach is unavailable - {code}."
    default_errors = None

    def __init__(self, code, message=None, errors=None, response=None):
        """
        Init function.

        Args:
            code (int): A status code returned from the request
            message (str): Message passed back
            errors (str): Errors passed back
            response (object): response object passed back

        """
        if message is None:
            message = self.default_message.format(code=code)

        super(ServiceUnavailable, self).__init__(
            message=message, errors=errors, response=response
        )
